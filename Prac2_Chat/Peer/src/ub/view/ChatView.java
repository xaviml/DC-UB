/*
 * Peer Side
 * This project is being developed by Pablo Martinez and Xavi Moreno
 */

package ub.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import ub.common.GroupReference;
import ub.common.InvalidUserNameException;
import ub.controller.ChatController;
import ub.model.Chat;
import ub.model.ChatModel;
import ub.model.Group;

/**
 *
 * @author zenbook
 */
public class ChatView extends JFrame implements ChatModel.ChatRoomListener{

    private ConcurrentHashMap<String, MessageBox> chats;
    private MessageBox currentMessageBox;
    
    private String username;
    
    private ChatController controller;
    
    /**
     * Creates new form ChatView
     */
    public ChatView() {
        initComponents();
        
        controller = new ChatController(this);
        
        chats = new ConcurrentHashMap<>();
        
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((screen.getWidth() - getWidth()) /2);
        int y = (int) ((screen.getHeight() -getHeight()) /2);
        setLocation(x, y);
        
        btn_send.setVisible(false);
        tf_send.setVisible(false);
        tab_chats.setVisible(false);
        
        list_users.setModel(new DefaultListModel());
        list_groups.setModel(new DefaultListModel());
        
        DefaultListCellRenderer renderer =  (DefaultListCellRenderer)list_groups.getCellRenderer();  
        renderer.setHorizontalAlignment(JLabel.CENTER); 
        renderer = (DefaultListCellRenderer)list_users.getCellRenderer();  
        renderer.setHorizontalAlignment(JLabel.CENTER); 
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                
            }
        });
        
        currentMessageBox = null;
    }
    
    public boolean registry(String IP, int port, String user) {
        this.username = user;
        try {
            controller.register(IP, port, user);
            return true;
        } catch (RemoteException | NotBoundException | MalformedURLException | InvalidUserNameException ex) {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab_chats = new javax.swing.JTabbedPane();
        btn_send = new javax.swing.JButton();
        tf_send = new javax.swing.JTextField();
        tab_users = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_users = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_groups = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat RMI");
        setMinimumSize(new java.awt.Dimension(355, 235));

        tab_chats.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tab_chats.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        btn_send.setText("Send");
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        tf_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_sendActionPerformed(evt);
            }
        });

        tab_users.setBorder(null);
        tab_users.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        list_users.setBorder(null);
        list_users.setFont(new java.awt.Font("DejaVu Sans Mono", 2, 15)); // NOI18N
        list_users.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_users.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                list_usersMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(list_users);

        tab_users.addTab("Users", jScrollPane1);

        list_groups.setBorder(null);
        list_groups.setFont(new java.awt.Font("DejaVu Sans Mono", 2, 15)); // NOI18N
        list_groups.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_groups.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                list_groupsMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(list_groups);

        tab_users.addTab("Groups", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_users, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tf_send, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_send, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tab_chats))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tab_chats)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_send)
                            .addComponent(tf_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tab_users, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void list_groupsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_groupsMousePressed
        if(evt.getClickCount() == 2) {
            
        }
    }//GEN-LAST:event_list_groupsMousePressed

    private void list_usersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_usersMousePressed
        DefaultListModel model = (DefaultListModel) list_users.getModel();
        String name = (String) model.get(list_users.getSelectedIndex());
        if(evt.getClickCount() == 2) {
            MessageBox m = getMessageBoxChat(name);
            openTab(m, false, true);
            tf_send.requestFocusInWindow();
        }
    }//GEN-LAST:event_list_usersMousePressed

    private void tf_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_sendActionPerformed
        sendMessage();
    }//GEN-LAST:event_tf_sendActionPerformed

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        sendMessage();
    }//GEN-LAST:event_btn_sendActionPerformed

    private void sendMessage() {
        final String msg = tf_send.getText();
        if(msg.isEmpty()) return;
        new Thread(new Runnable() {
            @Override
            public void run() {
                    controller.writeMessage(currentMessageBox.getFirstUser(), msg);
            }
        }).start();
        tf_send.setText("");
    }
    
    private void openTab(MessageBox m, boolean group, boolean selectedTab) {
        if(tab_chats.getTabCount() == 0) {
            btn_send.setVisible(true);
            tf_send.setVisible(true);
            tab_chats.setVisible(true);
        }
        int idx = tab_chats.indexOfTab(m.getNameChat());
        if(idx == -1) { //if tab doesn't exist...
            tab_chats.addTab(m.getNameChat(), m);
            idx = tab_chats.getTabCount()-1;
        }
        
        //Select the tab
        if(selectedTab || tab_chats.getTabCount() == 1) {
            tab_chats.setSelectedIndex(idx);
            currentMessageBox = m;
        }
    }
    
    private void addUser(String user) {
        addStringInList(user, list_users);
    }
    
    private void addGroup(String group) {
        addStringInList(group, list_groups);
    }
    
    private void addStringInList(String string, JList list) {
        DefaultListModel model = (DefaultListModel) list.getModel();
        model.addElement(string);
    }
    
    private void removeUser(String user) {
        addStringInList(user, list_users);
    }
    
    private void removeGroup(String group) {
        addStringInList(group, list_groups);
    }
    
    private void removeStringInList(String string, JList list) {
        DefaultListModel model = (DefaultListModel) list.getModel();
        model.removeElement(string);
    }
    
    private MessageBox getMessageBoxChat(String username) {
        MessageBox m;
        if(chats.containsKey(username)) {
            m = chats.get(username);
        }else{
            m = new MessageBox(username, this.username, new String[]{username});
            chats.put(username, m);
        }
        return m;
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ChatView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_send;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_groups;
    private javax.swing.JList list_users;
    private javax.swing.JTabbedPane tab_chats;
    private javax.swing.JTabbedPane tab_users;
    private javax.swing.JTextField tf_send;
    // End of variables declaration//GEN-END:variables

    @Override
    public Chat.ChatListener onNewChatCreated(String username) {
        MessageBox msgBox = getMessageBoxChat(username);
        openTab(msgBox, false, false);
        return msgBox;
    }

    @Override
    public void onMemberConnected(String username) {

        if(username.equals(this.username)) return;
        addUser(username);
    }

    @Override
    public void onMemberDisconnected(String username) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Group.GroupListener onNewGroupCreated(GroupReference gref, ArrayList<String> members, String groupName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
