.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Dijous2
.ds LH Distributed computing
.ds RH February 2014
.ds CH University of Barcelona
.ds RF FORMFEED[Page %]
.ad l
.in 0

.nf
.tl 'Dijous2''Pablo M. M.'	
.tl 'Internet-Draft''Xavi M. L.'
.tl 'Intended status: Informational''Universitat de Barcelona'
.tl '''February 2014'
.fi

.ce 2
Domino's Protocol -- DP/0.1
.fi
.in 3

.ti 0
Abstract

Domino is a popular game which is played by many users. It's an easy game where you must position your tiles on a board and empty your hand following a set of rules.

.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . .  2
     1.1 Basic Structure  . . . . . . . . . . . . . . . . . . . . . .  2
   2 DP Procedure . . . . . . . . . . . . . . . . . . . . . . . . . .  3
     2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . .  3
     2.2 Structure of Command . . . . . . . . . . . . . . . . . . . .  3
     2.3 Model Structure of Commands  . . . . . . . . . . . . . . . .  4
     2.4 Commands . . . . . . . . . . . . . . . . . . . . . . . . . .  5
       2.4.1 Client to Server . . . . . . . . . . . . . . . . . . . .  5
         2.4.1.1 HELLO  . . . . . . . . . . . . . . . . . . . . . . .  5
         2.4.1.2 MOVEMENT / NO MOVEMENT CLIENT - M/NM C . . . . . . .  5
       2.4.2 Server to Client . . . . . . . . . . . . . . . . . . . .  6
         2.4.2.1 ERROR  . . . . . . . . . . . . . . . . . . . . . . .  6
         2.4.2.2 TILES  . . . . . . . . . . . . . . . . . . . . . . .  7
         2.4.2.3 MOVEMENT / NO MOVEMENT SERVER - M/NM S . . . . . . .  7
         2.4.2.4 STEAL  . . . . . . . . . . . . . . . . . . . . . . .  8
         2.4.2.5 FINAL  . . . . . . . . . . . . . . . . . . . . . . .  9
     2.5 Command Syntax . . . . . . . . . . . . . . . . . . . . . . . 10
     2.6 Examples DP  . . . . . . . . . . . . . . . . . . . . . . . . 10
       2.6.1 Terminology  . . . . . . . . . . . . . . . . . . . . . . 10
       2.6.2 Examples . . . . . . . . . . . . . . . . . . . . . . . . 11
   3 References . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 13
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents


.bp
.ti 0
1 Introduction

Domino Protocol was designed by the students of  Distributed computing at the 'Universitat de Barcelona'. This protocol define the messages shared betwen client and server in order to control a distributed game of Domino. This is a single-game focused protocol, multiple games and their scores are not expected.

.ti 0
1.1 Basic Structure

Each message can be summarised as a rquest from the client, followed by a response from the server. The response can be a normal response of the request or an error message, all the possible errors are explained later. 

.tl '   Client''Server'
.tl '   |''|'
.tl '   |''|'
.tl '   |'message to server'|'
.tl '   |'------------------------------------------------------------------>'|'
.tl '   |'message to client / ERROR'|'
.tl '   |'<------------------------------------------------------------------'|'
.tl '   |''|'
.tl '   |''|'
.tl '   |''|'

.tl ''Figure 1''

.bp
.ti 0
2 DP Procedure

.ti 0
2.1 Introduction

In this section we'll define all messages of the protocol. For each message we will see the request/response.

.ti 0
2.2 Structure of Frame

A frame is compound of two parts, header and body, as shown in the following figure:

.in 6
.nf
.c)
+------------------------------------------------------------+
|            |                                               |
|   HEADER   |                      BODY                     | 
|            |                                               |
+------------------------------------------------------------+
.)c
.in 3

.tl ''Figure 2''

Header size: 1 byte
Body size: depends on the command
.fi

.bp
.ti 0
2.3 Model Structure of Commands

.nf
      +---------------+                        +---------------+
      |     _____     |----------------------->|               |
  +-->|     HELLO     |--------+               |     FITXES    |
  |   |               |<---+   |               |               |
  |   +---------------+    |   |               +---------------+
  |                        |   V                   |
  |                    +---------------+           | 
  |                    |               |------+    |
  |                    |     ERROR     |<--+  |    |
  |                    |               |   |  |    |
  |                    +---------------+   |  |    |
  |                                        |  V    V
  |   +---------------+              +---------------+
  |   |               |------------->|    ________   |
  |   |    TIRADA S   |              |    TIRADA C   |<--+
  |   |               |<-------------|               |   |
  |   +---------------+              +---------------+   |
  |          |                      /        |           |
  |          V                     /         V           |
  |   +---------------+           /  +---------------+   |
  |   |               |<---------/   |               |___|  
  +---|     FINAL     |              |  DONAR FITXA  |
      |               |              |               |
      +---------------+              +---------------+
.fi

.tl ''Figure 3''

This is the model for all commands where the first is 'HELLO' request which starts the game. As soon as game starts we've defined all possible request/response series as a states machine in the figure.

Those commands which have a line on them are the requests, and the others are responses. 

.bp
.ti 0
2.4 Commands

.ti 0
2.4.1 Client to Server

.ti 0
2.4.1.1 HELLO \" Primera trama

This is the first request. Client must send this in order to start a new game. In this message we only need a header because we don't need any additional information.

.in 6
.nf
.c)
+----------+
|          |
|   0x01   |
|          |
+----------+
.)c

Figure 4

.in 3
Head information: 0x01

Frame length: 1 byte
Example reference: 1
.fi

.ti 0
2.4.1.2 MOVEMENT / NO MOVEMENT CLIENT - M/NM C

This command is used by the client to make a movement. A movement is defined by 3 ASCII bytes, at this point the client has two legal actions: throwing a piece, not thorwing a piece. In order to make a valid movement, pieces must be sent literally to fit the pieces on the table. Wich means that if we have "[3|2][2|1]" and we want to insert a piece in the left side we will need to send that piece as "[N|3]", or if we want to insert a piece in the right side we will have to send the piece as "[1|N]". If pieces sent doesn't fit this model the server will return an error of type 'Illegal Action'. 

.in 6
.nf
.c)
+----------+-------------------------------------------+
|          |                                           |
|   0x03   |                  movement                 |
|          |                                           |
+----------+-------------------------------------------+
.)c

Figure 5

.in 3
Header information: 0x03
Body information:
.ti 6
movement:   tirada per part del client

Frame length: 4 bytes
Example reference: 2, 3, 4, 6
.fi

.ti 0
2.4.2 Server to Client

.ti 0
2.4.2.1 ERROR

There are five different error types, each one of them has a unique identifier (errorid). All error frames will contain also a String defining the error, for example "Piece [N|M] doesn't fit [Q|R].". These messages can contain, as much, 140 characters. 

.in 6
.nf
.c)
+----------+-----------+-------------------------------+
|          |           |                               |
|   0x00   |  errorid  |           errormsg            |
|          |           |                               |
+----------+-----------+-------------------------------+
.)c

Figure 6

.in 3
Head information: 0x00
Body information:
.in 6
errorid:    error type (definited above)
errormsg:   not exceeding 140 characters message
.in 3

Total of byte included the header: 4 bytes + extension message
Example reference: 5, 6
.fi

Types of errors:
.in 6
.nf
Syntax error:             0x00
Ilegal action:            0x01
Not enoguh resources:    0x02
Internal error server:    0x03
Undefined error:          0x04
.fi
.in 3

.bp
.ti 0
2.4.2.2 TILES

This frame is the one sent by the server with the starting tiles of the client, and who has the first turn. We first send 7 tiles, each one composed by two positive integers betwen 0 and 6. Afer that, two bytes are added as the first movement of the server. If client has the first movement the two bytes will be "NT".

.in 6
.nf
.c)
+----------+------------+-------------------------------+
|          |            |                               |
|   0x02   |   7*tile   |           tile/'NT'           |
|          |            |                               |
+----------+------------+-------------------------------+
.)c

Figure 7

.in 3
Header information: 0x02
.in 6
7*tile:      conjunto de 7 fichas
tile/'NT':   indicador de quien inicia la partida
.in 3


Total of byte included the header: 17 bytes
Example reference: 1
.fi

.ti 0
2.4.2.3 MOVEMENT / NO MOVEMENT SERVER - M/NM S

The server response from a movement, is usually a frame with his own movement. This frame is similar to M/NM C frame, this frame includes the movement of the computer (movement) and the number of tiles remaining in its hand (restserver).

.in 6
.nf
.c)
+----------+-------------------+-------------------------------+
|          |                   |                               |
|   0x04   |      movement     |           restserver          |
|          |                   |                               |
+----------+-------------------+-------------------------------+
.)c

Figure 8

.in 3
Header information: 0x04
Body information:
.in 6
movement:     movement of the server
restserver:   #tiles rest of the server
.in 3

Total of byte included the header: 8 bytes
Example reference: 2, 3, 4
.fi
.bp
.ti 0
2.4.2.4 STEAL

If the client can't place any tile in the table he will send a 'no movement' tile, so it will try to steal. The frame only contains the tile (tile) that has been stolen. This action will end the turn of the client just if there are no pieces left to steal. 

.in 6
.nf
.c)
+----------+-----------+
|          |           |
|   0x05   |    tile   |
|          |           |
+----------+-----------+
.)c

Figure 9

.in 3
Header information: 0x05
Body information:
.ti 6
tile:   tile stolen

Total of byte included the header: 3 bytes
Example reference: 3
.fi
.bp
.ti 0
2.4.2.5 FINAL

End of game frame, this will be sent when the game is over. It contains the winner, and the final score obtained by the server in case of draw.

.in 6
.nf
.c)
If draw
   +----------+------------+---------------+
   |          |            |               |
   |   0x06   |   winner   |  scoreserver  |
   |          |            |               |
   +----------+------------+---------------+
Otherwise
   +----------+------------+
   |          |            |
   |   0x06   |   winner   |
   |          |            |
   +----------+------------+
.)c

Figure 10

.in 3
Header information: 0x06
Body information:
.in 6
winner:        game winner
scoreserver:   server score
.in 3
.fi

Winner:
.in 6
.nf
Client:   0x00
Server:   0x01
Draw:     0x02

.in 3
Frame length: 6 bytes
Example reference: 4
.fi

.bp
.ti 0
2.5 Command Syntax

This is the command syntax (using ABNF notation) [1]. All commands that use character or character sequence should be represented in ASCII [2].

.in 8
.nf
;basic structures
numdp = "0" / "1" / "2" / "3" / "4" / "5" / "6"
digit = %x30-39
dir = "L" / "R"
char = %x01-7F
string = string char
int = %x00-FFFF

;The order matters, it's the order as the tiles are put,
;without invert them.
tile = numdp numdp
movement = [tile dir] / "NT "
errorid = %x00-04

;This is the size of a character sequence.
;Este es el tamaño de una cadena de caracteres.
;The size of this field is voiced in character sequence.
;For example: "5" to say "hello"
;In this case this sequence shouldn't exceed 140 characters
;So this should be three digits
midamsg = 3*digit
errormsg = midamsg string
restserver = int
winner = %x00-02
scoreserver =  int
.fi
.in 3

.ti 0
2.6 Examples DP

.ti 0
2.6.1 Terminology
.nf

This is the terminology used in the next examples:
.in 6
C  -> Client-DP
S  -> Server-DP
|  -> Visual separator
"  -> Used to represent character sequences
0x -> Hexadecimal number
.fi
.in 3

.bp
.ti 0
2.6.2 Examples

.tl ''-------------------------------------------------------------''

.tl ''Example of first connection''

.in 6
.nf
Either start server:

.in 9
C: 0x01
S: 0x02 | "0" "6"
          "4" "3"
          "2" "1"
          "6" "5"
          "5" "5"
          "3" "2"
          "4" "1" | "6" "6"

.ti 6
Or start client

C: 0x01
S: 0x02 | "0" "6"
          "4" "3"
          "2" "1"
          "6" "5"
          "5" "5"
          "3" "2"
          "4" "1" | "NT"

.in 3
.fi

.tl ''Example 1''

.tl ''-------------------------------------------------------------''

./'SECOND EXAMPLE
.tl ''-------------------------------------------------------------''

.tl ''Example of a normal movement''

.in 6
.nf
C: 0x03 | "4" "3" "R"
S: 0x04 | "3" "5" "R" | 0x0006
C: 0x03 | "5" "5" "R"
S: 0x04 | "NT " | 0x0006
C: 0x03 | "1" "4" "L"
S: 0x04 | "1" "1" "L" | 0x0005

.in 3
.fi

.tl ''Example 2''

.tl ''-------------------------------------------------------------''

./'THIRD EXAMPLE
.tl ''-------------------------------------------------------------''

.tl ''Example of steal a tile''

.in 6
.nf
C: 0x03 | "NT "
S: 0x05 | "2" "3"
C: 0x03 | "NT "
S: 0x05 | "1" "3"
C: 0x03 | "3" "1" "R"
S: 0x04 | "1" "6" "R" | 0x0004

.in 3
.fi

.tl ''Example 3''

.tl ''-------------------------------------------------------------''

./'FOURTH EXAMPLE
.tl ''-------------------------------------------------------------''

.tl ''Example of end game''

.in 9
.nf

.ti 6
Subexample 1

C: 0x03 | "3" "2" "R"
S: 0x06 | 0x00

.ti 6
Subexample 2

C: 0x03 | "3" "2" "L"
S: 0x04 | "5" "6" "R" | 0x0000
S: 0x06 | 0x01

.ti 6
Subexample 3

C: 0x03 | "NT "
S: 0x04 | "NT " | 0x0002
S: 0x06 | 0x01

.ti 6
Subexample 4
C: 0x03 | "NT "
S: 0x04 | "NT " | 0x0001
S: 0x06 | 0x02 | 0x0005

.in 3
.fi

.tl ''Example 4''

.tl ''-------------------------------------------------------------''

./'5 EXAMPLE
.tl ''-------------------------------------------------------------''

.tl ''Example of ilegal action''

.in 6
.nf
C: 0x10
S: 0x00 | 0x01 | "024" | "This command don't exist"

.in 3
.fi

.tl ''Example 5''

.tl ''-------------------------------------------------------------''

./'6 EXAMPLE
.tl ''-------------------------------------------------------------''

.tl ''Example of syntax error''

.in 6
.nf
C: 0x03 | "10" "3" "L"
S: 0x00 | 0x00 | "032" | "Number should be between 0 and 6"

.in 3
.fi

.tl ''Example 6''

.tl ''-------------------------------------------------------------''

.ti 0
3 References
.in 8

.ti 3
[1]   ABNF notation

Augmented Backus-Naur Form (ABNF) is a metalanguage based on Backus-Naur Form (BNF),but consisting of its own syntax and derivation rules. Reference to RFC 5234.

.ti 3
[2]   ASCII

ASCII is a character-encoding scheme originally based on the English alphabet that encodes 128 specified character (0-9, a-z, A-Z, basic puntuation symbols, code controls and blank space) into 7-bit binary integers.

.in 3
.ti 0
Authors' Addresses

.nf
Xavi Moreno Liceras
University of Barcelona
EMail: xmorenli7@alumnes.ub.edu

Pablo Martinez Martinez
University of Barcelona
EMail: pmartima22@alumnes.ub.edu
.fi
